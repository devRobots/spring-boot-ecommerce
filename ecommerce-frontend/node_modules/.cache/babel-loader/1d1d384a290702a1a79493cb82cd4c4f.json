{"ast":null,"code":"var baseInRange = require('./_baseInRange'),\n    toFinite = require('./toFinite'),\n    toNumber = require('./toNumber');\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\n\n\nfunction inRange(number, start, end) {\n  start = toFinite(start);\n\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toFinite(end);\n  }\n\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nmodule.exports = inRange;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/inRange.js"],"names":["baseInRange","require","toFinite","toNumber","inRange","number","start","end","undefined","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CADtB;AAAA,IAEIE,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAFtB;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA,SAASG,OAAT,CAAiBC,MAAjB,EAAyBC,KAAzB,EAAgCC,GAAhC,EAAqC;AACnCD,EAAAA,KAAK,GAAGJ,QAAQ,CAACI,KAAD,CAAhB;;AACA,MAAIC,GAAG,KAAKC,SAAZ,EAAuB;AACrBD,IAAAA,GAAG,GAAGD,KAAN;AACAA,IAAAA,KAAK,GAAG,CAAR;AACD,GAHD,MAGO;AACLC,IAAAA,GAAG,GAAGL,QAAQ,CAACK,GAAD,CAAd;AACD;;AACDF,EAAAA,MAAM,GAAGF,QAAQ,CAACE,MAAD,CAAjB;AACA,SAAOL,WAAW,CAACK,MAAD,EAASC,KAAT,EAAgBC,GAAhB,CAAlB;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["var baseInRange = require('./_baseInRange'),\n    toFinite = require('./toFinite'),\n    toNumber = require('./toNumber');\n\n/**\n * Checks if `n` is between `start` and up to, but not including, `end`. If\n * `end` is not specified, it's set to `start` with `start` then set to `0`.\n * If `start` is greater than `end` the params are swapped to support\n * negative ranges.\n *\n * @static\n * @memberOf _\n * @since 3.3.0\n * @category Number\n * @param {number} number The number to check.\n * @param {number} [start=0] The start of the range.\n * @param {number} end The end of the range.\n * @returns {boolean} Returns `true` if `number` is in the range, else `false`.\n * @see _.range, _.rangeRight\n * @example\n *\n * _.inRange(3, 2, 4);\n * // => true\n *\n * _.inRange(4, 8);\n * // => true\n *\n * _.inRange(4, 2);\n * // => false\n *\n * _.inRange(2, 2);\n * // => false\n *\n * _.inRange(1.2, 2);\n * // => true\n *\n * _.inRange(5.2, 4);\n * // => false\n *\n * _.inRange(-3, -2, -6);\n * // => true\n */\nfunction inRange(number, start, end) {\n  start = toFinite(start);\n  if (end === undefined) {\n    end = start;\n    start = 0;\n  } else {\n    end = toFinite(end);\n  }\n  number = toNumber(number);\n  return baseInRange(number, start, end);\n}\n\nmodule.exports = inRange;\n"]},"metadata":{},"sourceType":"script"}