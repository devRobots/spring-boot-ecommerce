{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _memoize from \"lodash/memoize\";\nimport _invoke from \"lodash/invoke\";\nimport { isRefObject, toRefObject } from '@stardust-ui/react-component-ref';\n\nvar ReferenceProxy =\n/*#__PURE__*/\nfunction () {\n  function ReferenceProxy(refObject) {\n    _classCallCheck(this, ReferenceProxy);\n\n    this.ref = refObject;\n  }\n\n  _createClass(ReferenceProxy, [{\n    key: \"getBoundingClientRect\",\n    value: function getBoundingClientRect() {\n      return _invoke(this.ref.current, 'getBoundingClientRect', {});\n    }\n  }, {\n    key: \"clientWidth\",\n    get: function get() {\n      return this.getBoundingClientRect().width;\n    }\n  }, {\n    key: \"clientHeight\",\n    get: function get() {\n      return this.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"parentNode\",\n    get: function get() {\n      return this.ref.current ? this.ref.current.parentNode : undefined;\n    }\n  }]);\n\n  return ReferenceProxy;\n}();\n/**\n * Popper.js does not support ref objects from `createRef()` as referenceElement. If we will pass\n * directly `ref`, `ref.current` will be `null` at the render process. We use memoize to keep the\n * same reference between renders.\n *\n * @see https://popper.js.org/popper-documentation.html#referenceObject\n */\n\n\nvar createReferenceProxy = _memoize(function (reference) {\n  return new ReferenceProxy(isRefObject(reference) ? reference : toRefObject(reference));\n});\n\nexport default createReferenceProxy;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/modules/Popup/lib/createReferenceProxy.js"],"names":["_classCallCheck","_createClass","_memoize","_invoke","isRefObject","toRefObject","ReferenceProxy","refObject","ref","key","value","getBoundingClientRect","current","get","width","height","parentNode","undefined","createReferenceProxy","reference"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,uCAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,kCAAzC;;AAEA,IAAIC,cAAc;AAClB;AACA,YAAY;AACV,WAASA,cAAT,CAAwBC,SAAxB,EAAmC;AACjCP,IAAAA,eAAe,CAAC,IAAD,EAAOM,cAAP,CAAf;;AAEA,SAAKE,GAAL,GAAWD,SAAX;AACD;;AAEDN,EAAAA,YAAY,CAACK,cAAD,EAAiB,CAAC;AAC5BG,IAAAA,GAAG,EAAE,uBADuB;AAE5BC,IAAAA,KAAK,EAAE,SAASC,qBAAT,GAAiC;AACtC,aAAOR,OAAO,CAAC,KAAKK,GAAL,CAASI,OAAV,EAAmB,uBAAnB,EAA4C,EAA5C,CAAd;AACD;AAJ2B,GAAD,EAK1B;AACDH,IAAAA,GAAG,EAAE,aADJ;AAEDI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAKF,qBAAL,GAA6BG,KAApC;AACD;AAJA,GAL0B,EAU1B;AACDL,IAAAA,GAAG,EAAE,cADJ;AAEDI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAKF,qBAAL,GAA6BI,MAApC;AACD;AAJA,GAV0B,EAe1B;AACDN,IAAAA,GAAG,EAAE,YADJ;AAEDI,IAAAA,GAAG,EAAE,SAASA,GAAT,GAAe;AAClB,aAAO,KAAKL,GAAL,CAASI,OAAT,GAAmB,KAAKJ,GAAL,CAASI,OAAT,CAAiBI,UAApC,GAAiDC,SAAxD;AACD;AAJA,GAf0B,CAAjB,CAAZ;;AAsBA,SAAOX,cAAP;AACD,CA9BD,EAFA;AAiCA;;;;;;;;;AASA,IAAIY,oBAAoB,GAAGhB,QAAQ,CAAC,UAAUiB,SAAV,EAAqB;AACvD,SAAO,IAAIb,cAAJ,CAAmBF,WAAW,CAACe,SAAD,CAAX,GAAyBA,SAAzB,GAAqCd,WAAW,CAACc,SAAD,CAAnE,CAAP;AACD,CAFkC,CAAnC;;AAIA,eAAeD,oBAAf","sourcesContent":["import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _memoize from \"lodash/memoize\";\nimport _invoke from \"lodash/invoke\";\nimport { isRefObject, toRefObject } from '@stardust-ui/react-component-ref';\n\nvar ReferenceProxy =\n/*#__PURE__*/\nfunction () {\n  function ReferenceProxy(refObject) {\n    _classCallCheck(this, ReferenceProxy);\n\n    this.ref = refObject;\n  }\n\n  _createClass(ReferenceProxy, [{\n    key: \"getBoundingClientRect\",\n    value: function getBoundingClientRect() {\n      return _invoke(this.ref.current, 'getBoundingClientRect', {});\n    }\n  }, {\n    key: \"clientWidth\",\n    get: function get() {\n      return this.getBoundingClientRect().width;\n    }\n  }, {\n    key: \"clientHeight\",\n    get: function get() {\n      return this.getBoundingClientRect().height;\n    }\n  }, {\n    key: \"parentNode\",\n    get: function get() {\n      return this.ref.current ? this.ref.current.parentNode : undefined;\n    }\n  }]);\n\n  return ReferenceProxy;\n}();\n/**\n * Popper.js does not support ref objects from `createRef()` as referenceElement. If we will pass\n * directly `ref`, `ref.current` will be `null` at the render process. We use memoize to keep the\n * same reference between renders.\n *\n * @see https://popper.js.org/popper-documentation.html#referenceObject\n */\n\n\nvar createReferenceProxy = _memoize(function (reference) {\n  return new ReferenceProxy(isRefObject(reference) ? reference : toRefObject(reference));\n});\n\nexport default createReferenceProxy;"]},"metadata":{},"sourceType":"module"}