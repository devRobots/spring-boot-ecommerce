{"ast":null,"code":"'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\n\n\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\n\n\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\n\n\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/axios/lib/core/InterceptorManager.js"],"names":["utils","require","InterceptorManager","handlers","prototype","use","fulfilled","rejected","push","length","eject","id","forEach","fn","forEachHandler","h","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAAnB;;AAEA,SAASC,kBAAT,GAA8B;AAC5B,OAAKC,QAAL,GAAgB,EAAhB;AACD;AAED;;;;;;;;;;AAQAD,kBAAkB,CAACE,SAAnB,CAA6BC,GAA7B,GAAmC,SAASA,GAAT,CAAaC,SAAb,EAAwBC,QAAxB,EAAkC;AACnE,OAAKJ,QAAL,CAAcK,IAAd,CAAmB;AACjBF,IAAAA,SAAS,EAAEA,SADM;AAEjBC,IAAAA,QAAQ,EAAEA;AAFO,GAAnB;AAIA,SAAO,KAAKJ,QAAL,CAAcM,MAAd,GAAuB,CAA9B;AACD,CAND;AAQA;;;;;;;AAKAP,kBAAkB,CAACE,SAAnB,CAA6BM,KAA7B,GAAqC,SAASA,KAAT,CAAeC,EAAf,EAAmB;AACtD,MAAI,KAAKR,QAAL,CAAcQ,EAAd,CAAJ,EAAuB;AACrB,SAAKR,QAAL,CAAcQ,EAAd,IAAoB,IAApB;AACD;AACF,CAJD;AAMA;;;;;;;;;;AAQAT,kBAAkB,CAACE,SAAnB,CAA6BQ,OAA7B,GAAuC,SAASA,OAAT,CAAiBC,EAAjB,EAAqB;AAC1Db,EAAAA,KAAK,CAACY,OAAN,CAAc,KAAKT,QAAnB,EAA6B,SAASW,cAAT,CAAwBC,CAAxB,EAA2B;AACtD,QAAIA,CAAC,KAAK,IAAV,EAAgB;AACdF,MAAAA,EAAE,CAACE,CAAD,CAAF;AACD;AACF,GAJD;AAKD,CAND;;AAQAC,MAAM,CAACC,OAAP,GAAiBf,kBAAjB","sourcesContent":["'use strict';\n\nvar utils = require('./../utils');\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n"]},"metadata":{},"sourceType":"script"}