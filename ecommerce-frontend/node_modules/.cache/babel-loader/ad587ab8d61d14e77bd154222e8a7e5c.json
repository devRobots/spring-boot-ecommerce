{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A divider sub-component for Breadcrumb component.\n */\n\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n\n  if (!_isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: _objectSpread({}, rest, {\n        className: classes\n      }),\n      autoGenerateKey: false\n    });\n  }\n\n  if (!_isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? '/' : children);\n}\n\nBreadcrumbDivider.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\"];\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return {\n    icon: icon\n  };\n});\nexport default BreadcrumbDivider;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbDivider.js"],"names":["_extends","_objectSpread","_isNil","cx","PropTypes","React","childrenUtils","createShorthandFactory","customPropTypes","getUnhandledProps","getElementType","Icon","BreadcrumbDivider","props","children","className","content","icon","classes","rest","ElementType","create","defaultProps","autoGenerateKey","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","itemShorthand"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,aAAP,MAA0B,qCAA1B;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,sBAAxB,EAAgDC,eAAhD,EAAiEC,iBAAjE,EAAoFC,cAApF,QAA0G,WAA1G;AACA,OAAOC,IAAP,MAAiB,qBAAjB;AACA;;;;AAIA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAChC,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,IAAI,GAAGJ,KAAK,CAACI,IAHjB;AAIA,MAAIC,OAAO,GAAGf,EAAE,CAAC,SAAD,EAAYY,SAAZ,CAAhB;AACA,MAAII,IAAI,GAAGV,iBAAiB,CAACG,iBAAD,EAAoBC,KAApB,CAA5B;AACA,MAAIO,WAAW,GAAGV,cAAc,CAACE,iBAAD,EAAoBC,KAApB,CAAhC;;AAEA,MAAI,CAACX,MAAM,CAACe,IAAD,CAAX,EAAmB;AACjB,WAAON,IAAI,CAACU,MAAL,CAAYJ,IAAZ,EAAkB;AACvBK,MAAAA,YAAY,EAAErB,aAAa,CAAC,EAAD,EAAKkB,IAAL,EAAW;AACpCJ,QAAAA,SAAS,EAAEG;AADyB,OAAX,CADJ;AAIvBK,MAAAA,eAAe,EAAE;AAJM,KAAlB,CAAP;AAMD;;AAED,MAAI,CAACrB,MAAM,CAACc,OAAD,CAAX,EAAsB;AACpB,WAAOX,KAAK,CAACmB,aAAN,CAAoBJ,WAApB,EAAiCpB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AACzDJ,MAAAA,SAAS,EAAEG;AAD8C,KAAX,CAAzC,EAEHF,OAFG,CAAP;AAGD;;AAED,SAAOX,KAAK,CAACmB,aAAN,CAAoBJ,WAApB,EAAiCpB,QAAQ,CAAC,EAAD,EAAKmB,IAAL,EAAW;AACzDJ,IAAAA,SAAS,EAAEG;AAD8C,GAAX,CAAzC,EAEHZ,aAAa,CAACmB,KAAd,CAAoBX,QAApB,IAAgC,GAAhC,GAAsCA,QAFnC,CAAP;AAGD;;AAEDF,iBAAiB,CAACc,YAAlB,GAAiC,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,MAA3C,CAAjC;AACAd,iBAAiB,CAACe,SAAlB,GAA8BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AACpE;AACAC,EAAAA,EAAE,EAAE3B,SAAS,CAAC4B,WAFsD;;AAIpE;AACAlB,EAAAA,QAAQ,EAAEV,SAAS,CAAC6B,IALgD;;AAOpE;AACAlB,EAAAA,SAAS,EAAEX,SAAS,CAAC8B,MAR+C;;AAUpE;AACAlB,EAAAA,OAAO,EAAER,eAAe,CAAC2B,gBAX2C;;AAapE;AACAlB,EAAAA,IAAI,EAAET,eAAe,CAAC4B;AAd8C,CAAxC,GAe1B,EAfJ;AAgBAxB,iBAAiB,CAACS,MAAlB,GAA2Bd,sBAAsB,CAACK,iBAAD,EAAoB,UAAUK,IAAV,EAAgB;AACnF,SAAO;AACLA,IAAAA,IAAI,EAAEA;AADD,GAAP;AAGD,CAJgD,CAAjD;AAKA,eAAeL,iBAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A divider sub-component for Breadcrumb component.\n */\n\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n\n  if (!_isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: _objectSpread({}, rest, {\n        className: classes\n      }),\n      autoGenerateKey: false\n    });\n  }\n\n  if (!_isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? '/' : children);\n}\n\nBreadcrumbDivider.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\"];\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return {\n    icon: icon\n  };\n});\nexport default BreadcrumbDivider;"]},"metadata":{},"sourceType":"module"}