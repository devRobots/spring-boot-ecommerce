{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A content sub-component for the Reveal.\n */\n\nfunction RevealContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      hidden = props.hidden,\n      visible = props.visible;\n  var classes = cx('ui', useKeyOnly(hidden, 'hidden'), useKeyOnly(visible, 'visible'), 'content', className);\n  var rest = getUnhandledProps(RevealContent, props);\n  var ElementType = getElementType(RevealContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nRevealContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"hidden\", \"visible\"];\nRevealContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A reveal may contain content that is visible before interaction. */\n  hidden: PropTypes.bool,\n\n  /** A reveal may contain content that is hidden before user interaction. */\n  visible: PropTypes.bool\n} : {};\nexport default RevealContent;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/elements/Reveal/RevealContent.js"],"names":["_extends","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","useKeyOnly","RevealContent","props","children","className","content","hidden","visible","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","bool"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,UAA5E,QAA8F,WAA9F;AACA;;;;AAIA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,MAAIC,QAAQ,GAAGD,KAAK,CAACC,QAArB;AAAA,MACIC,SAAS,GAAGF,KAAK,CAACE,SADtB;AAAA,MAEIC,OAAO,GAAGH,KAAK,CAACG,OAFpB;AAAA,MAGIC,MAAM,GAAGJ,KAAK,CAACI,MAHnB;AAAA,MAIIC,OAAO,GAAGL,KAAK,CAACK,OAJpB;AAKA,MAAIC,OAAO,GAAGf,EAAE,CAAC,IAAD,EAAOO,UAAU,CAACM,MAAD,EAAS,QAAT,CAAjB,EAAqCN,UAAU,CAACO,OAAD,EAAU,SAAV,CAA/C,EAAqE,SAArE,EAAgFH,SAAhF,CAAhB;AACA,MAAIK,IAAI,GAAGV,iBAAiB,CAACE,aAAD,EAAgBC,KAAhB,CAA5B;AACA,MAAIQ,WAAW,GAAGZ,cAAc,CAACG,aAAD,EAAgBC,KAAhB,CAAhC;AACA,SAAOP,KAAK,CAACgB,aAAN,CAAoBD,WAApB,EAAiClB,QAAQ,CAAC,EAAD,EAAKiB,IAAL,EAAW;AACzDL,IAAAA,SAAS,EAAEI;AAD8C,GAAX,CAAzC,EAEHZ,aAAa,CAACgB,KAAd,CAAoBT,QAApB,IAAgCE,OAAhC,GAA0CF,QAFvC,CAAP;AAGD;;AAEDF,aAAa,CAACY,YAAd,GAA6B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,SAAhC,EAA2C,QAA3C,EAAqD,SAArD,CAA7B;AACAZ,aAAa,CAACa,SAAd,GAA0BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAChE;AACAC,EAAAA,EAAE,EAAExB,SAAS,CAACyB,WAFkD;;AAIhE;AACAhB,EAAAA,QAAQ,EAAET,SAAS,CAAC0B,IAL4C;;AAOhE;AACAhB,EAAAA,SAAS,EAAEV,SAAS,CAAC2B,MAR2C;;AAUhE;AACAhB,EAAAA,OAAO,EAAER,eAAe,CAACyB,gBAXuC;;AAahE;AACAhB,EAAAA,MAAM,EAAEZ,SAAS,CAAC6B,IAd8C;;AAgBhE;AACAhB,EAAAA,OAAO,EAAEb,SAAS,CAAC6B;AAjB6C,CAAxC,GAkBtB,EAlBJ;AAmBA,eAAetB,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A content sub-component for the Reveal.\n */\n\nfunction RevealContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      hidden = props.hidden,\n      visible = props.visible;\n  var classes = cx('ui', useKeyOnly(hidden, 'hidden'), useKeyOnly(visible, 'visible'), 'content', className);\n  var rest = getUnhandledProps(RevealContent, props);\n  var ElementType = getElementType(RevealContent, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nRevealContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"hidden\", \"visible\"];\nRevealContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A reveal may contain content that is visible before interaction. */\n  hidden: PropTypes.bool,\n\n  /** A reveal may contain content that is hidden before user interaction. */\n  visible: PropTypes.bool\n} : {};\nexport default RevealContent;"]},"metadata":{},"sourceType":"module"}