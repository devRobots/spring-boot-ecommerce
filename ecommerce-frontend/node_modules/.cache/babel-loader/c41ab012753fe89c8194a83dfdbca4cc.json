{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/collections/Table/Table.js"],"names":["_extends","_without","_map","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useKeyOrValueAndKey","useTextAlignProp","useVerticalAlignProp","useWidthProp","TableBody","TableCell","TableFooter","TableHeader","TableHeaderCell","TableRow","Table","props","attached","basic","celled","children","className","collapsing","color","columns","compact","definition","fixed","footerRow","headerRow","headerRows","inverted","padded","renderBodyRow","selectable","singleLine","size","sortable","stackable","striped","structured","tableData","textAlign","unstackable","verticalAlign","classes","rest","ElementType","isNil","createElement","hasHeaderRows","headerShorthandOptions","defaultProps","cellAs","headerElement","create","data","index","handledProps","as","propTypes","process","env","NODE_ENV","elementType","oneOfType","bool","oneOf","node","string","COLORS","WIDTHS","itemShorthand","every","disallow","collectionShorthand","demand","func","SIZES","array","TEXT_ALIGNMENTS","VERTICAL_ALIGNMENTS","Body","Cell","Footer","Header","HeaderCell","Row"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      headerRows = props.headerRows,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var hasHeaderRows = headerRow || headerRows;\n  var headerShorthandOptions = {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  };\n  var headerElement = hasHeaderRows && React.createElement(TableHeader, null, TableRow.create(headerRow, headerShorthandOptions), _map(headerRows, function (data) {\n    return TableRow.create(data, headerShorthandOptions);\n  }));\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerElement, React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"headerRows\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.every([customPropTypes.disallow(['headerRows']), customPropTypes.itemShorthand]),\n\n  /** Shorthand for multiple TableRows to be placed within Table.Header. */\n  headerRows: customPropTypes.every([customPropTypes.disallow(['headerRow']), customPropTypes.collectionShorthand]),\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;"]},"metadata":{},"sourceType":"module"}