{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * Comments can be grouped.\n */\n\nfunction CommentGroup(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content,\n      minimal = props.minimal,\n      size = props.size,\n      threaded = props.threaded;\n  var classes = cx('ui', size, useKeyOnly(collapsed, 'collapsed'), useKeyOnly(minimal, 'minimal'), useKeyOnly(threaded, 'threaded'), 'comments', className);\n  var rest = getUnhandledProps(CommentGroup, props);\n  var ElementType = getElementType(CommentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentGroup.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\", \"minimal\", \"size\", \"threaded\"];\nCommentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comments can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Comments can hide extra information unless a user shows intent to interact with a comment. */\n  minimal: PropTypes.bool,\n\n  /** Comments can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A comment list can be threaded to showing the relationship between conversations. */\n  threaded: PropTypes.bool\n} : {};\nexport default CommentGroup;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/views/Comment/CommentGroup.js"],"names":["_extends","_without","cx","PropTypes","React","childrenUtils","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","CommentGroup","props","className","children","collapsed","content","minimal","size","threaded","classes","rest","ElementType","createElement","isNil","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","bool","contentShorthand","oneOf","SIZES"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,eAAxB,EAAyCC,cAAzC,EAAyDC,iBAAzD,EAA4EC,GAA5E,EAAiFC,UAAjF,QAAmG,WAAnG;AACA;;;;AAIA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,QAAQ,GAAGF,KAAK,CAACE,QADrB;AAAA,MAEIC,SAAS,GAAGH,KAAK,CAACG,SAFtB;AAAA,MAGIC,OAAO,GAAGJ,KAAK,CAACI,OAHpB;AAAA,MAIIC,OAAO,GAAGL,KAAK,CAACK,OAJpB;AAAA,MAKIC,IAAI,GAAGN,KAAK,CAACM,IALjB;AAAA,MAMIC,QAAQ,GAAGP,KAAK,CAACO,QANrB;AAOA,MAAIC,OAAO,GAAGlB,EAAE,CAAC,IAAD,EAAOgB,IAAP,EAAaR,UAAU,CAACK,SAAD,EAAY,WAAZ,CAAvB,EAAiDL,UAAU,CAACO,OAAD,EAAU,SAAV,CAA3D,EAAiFP,UAAU,CAACS,QAAD,EAAW,UAAX,CAA3F,EAAmH,UAAnH,EAA+HN,SAA/H,CAAhB;AACA,MAAIQ,IAAI,GAAGb,iBAAiB,CAACG,YAAD,EAAeC,KAAf,CAA5B;AACA,MAAIU,WAAW,GAAGf,cAAc,CAACI,YAAD,EAAeC,KAAf,CAAhC;AACA,SAAOR,KAAK,CAACmB,aAAN,CAAoBD,WAApB,EAAiCtB,QAAQ,CAAC,EAAD,EAAKqB,IAAL,EAAW;AACzDR,IAAAA,SAAS,EAAEO;AAD8C,GAAX,CAAzC,EAEHf,aAAa,CAACmB,KAAd,CAAoBV,QAApB,IAAgCE,OAAhC,GAA0CF,QAFvC,CAAP;AAGD;;AAEDH,YAAY,CAACc,YAAb,GAA4B,CAAC,IAAD,EAAO,UAAP,EAAmB,WAAnB,EAAgC,WAAhC,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,MAAnE,EAA2E,UAA3E,CAA5B;AACAd,YAAY,CAACe,SAAb,GAAyBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC/D;AACAC,EAAAA,EAAE,EAAE3B,SAAS,CAAC4B,WAFiD;;AAI/D;AACAjB,EAAAA,QAAQ,EAAEX,SAAS,CAAC6B,IAL2C;;AAO/D;AACAnB,EAAAA,SAAS,EAAEV,SAAS,CAAC8B,MAR0C;;AAU/D;AACAlB,EAAAA,SAAS,EAAEZ,SAAS,CAAC+B,IAX0C;;AAa/D;AACAlB,EAAAA,OAAO,EAAEV,eAAe,CAAC6B,gBAdsC;;AAgB/D;AACAlB,EAAAA,OAAO,EAAEd,SAAS,CAAC+B,IAjB4C;;AAmB/D;AACAhB,EAAAA,IAAI,EAAEf,SAAS,CAACiC,KAAV,CAAgBnC,QAAQ,CAACQ,GAAG,CAAC4B,KAAL,EAAY,QAAZ,CAAxB,CApByD;;AAsB/D;AACAlB,EAAAA,QAAQ,EAAEhB,SAAS,CAAC+B;AAvB2C,CAAxC,GAwBrB,EAxBJ;AAyBA,eAAevB,YAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * Comments can be grouped.\n */\n\nfunction CommentGroup(props) {\n  var className = props.className,\n      children = props.children,\n      collapsed = props.collapsed,\n      content = props.content,\n      minimal = props.minimal,\n      size = props.size,\n      threaded = props.threaded;\n  var classes = cx('ui', size, useKeyOnly(collapsed, 'collapsed'), useKeyOnly(minimal, 'minimal'), useKeyOnly(threaded, 'threaded'), 'comments', className);\n  var rest = getUnhandledProps(CommentGroup, props);\n  var ElementType = getElementType(CommentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nCommentGroup.handledProps = [\"as\", \"children\", \"className\", \"collapsed\", \"content\", \"minimal\", \"size\", \"threaded\"];\nCommentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Comments can be collapsed, or hidden from view. */\n  collapsed: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Comments can hide extra information unless a user shows intent to interact with a comment. */\n  minimal: PropTypes.bool,\n\n  /** Comments can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** A comment list can be threaded to showing the relationship between conversations. */\n  threaded: PropTypes.bool\n} : {};\nexport default CommentGroup;"]},"metadata":{},"sourceType":"module"}