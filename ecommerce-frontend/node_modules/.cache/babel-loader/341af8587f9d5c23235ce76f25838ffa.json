{"ast":null,"code":"var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n/** Used to match leading and trailing whitespace. */\n\n\nvar reTrim = /^\\s+|\\s+$/g;\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\n\nfunction trim(string, chars, guard) {\n  string = toString(string);\n\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/trim.js"],"names":["baseToString","require","castSlice","charsEndIndex","charsStartIndex","stringToArray","toString","reTrim","trim","string","chars","guard","undefined","replace","strSymbols","chrSymbols","start","end","join","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CADvB;AAAA,IAEIE,aAAa,GAAGF,OAAO,CAAC,kBAAD,CAF3B;AAAA,IAGIG,eAAe,GAAGH,OAAO,CAAC,oBAAD,CAH7B;AAAA,IAIII,aAAa,GAAGJ,OAAO,CAAC,kBAAD,CAJ3B;AAAA,IAKIK,QAAQ,GAAGL,OAAO,CAAC,YAAD,CALtB;AAOA;;;AACA,IAAIM,MAAM,GAAG,YAAb;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,SAASC,IAAT,CAAcC,MAAd,EAAsBC,KAAtB,EAA6BC,KAA7B,EAAoC;AAClCF,EAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAjB;;AACA,MAAIA,MAAM,KAAKE,KAAK,IAAID,KAAK,KAAKE,SAAxB,CAAV,EAA8C;AAC5C,WAAOH,MAAM,CAACI,OAAP,CAAeN,MAAf,EAAuB,EAAvB,CAAP;AACD;;AACD,MAAI,CAACE,MAAD,IAAW,EAAEC,KAAK,GAAGV,YAAY,CAACU,KAAD,CAAtB,CAAf,EAA+C;AAC7C,WAAOD,MAAP;AACD;;AACD,MAAIK,UAAU,GAAGT,aAAa,CAACI,MAAD,CAA9B;AAAA,MACIM,UAAU,GAAGV,aAAa,CAACK,KAAD,CAD9B;AAAA,MAEIM,KAAK,GAAGZ,eAAe,CAACU,UAAD,EAAaC,UAAb,CAF3B;AAAA,MAGIE,GAAG,GAAGd,aAAa,CAACW,UAAD,EAAaC,UAAb,CAAb,GAAwC,CAHlD;AAKA,SAAOb,SAAS,CAACY,UAAD,EAAaE,KAAb,EAAoBC,GAApB,CAAT,CAAkCC,IAAlC,CAAuC,EAAvC,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBZ,IAAjB","sourcesContent":["var baseToString = require('./_baseToString'),\n    castSlice = require('./_castSlice'),\n    charsEndIndex = require('./_charsEndIndex'),\n    charsStartIndex = require('./_charsStartIndex'),\n    stringToArray = require('./_stringToArray'),\n    toString = require('./toString');\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/**\n * Removes leading and trailing whitespace or specified characters from `string`.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to trim.\n * @param {string} [chars=whitespace] The characters to trim.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {string} Returns the trimmed string.\n * @example\n *\n * _.trim('  abc  ');\n * // => 'abc'\n *\n * _.trim('-_-abc-_-', '_-');\n * // => 'abc'\n *\n * _.map(['  foo  ', '  bar  '], _.trim);\n * // => ['foo', 'bar']\n */\nfunction trim(string, chars, guard) {\n  string = toString(string);\n  if (string && (guard || chars === undefined)) {\n    return string.replace(reTrim, '');\n  }\n  if (!string || !(chars = baseToString(chars))) {\n    return string;\n  }\n  var strSymbols = stringToArray(string),\n      chrSymbols = stringToArray(chars),\n      start = charsStartIndex(strSymbols, chrSymbols),\n      end = charsEndIndex(strSymbols, chrSymbols) + 1;\n\n  return castSlice(strSymbols, start, end).join('');\n}\n\nmodule.exports = trim;\n"]},"metadata":{},"sourceType":"script"}