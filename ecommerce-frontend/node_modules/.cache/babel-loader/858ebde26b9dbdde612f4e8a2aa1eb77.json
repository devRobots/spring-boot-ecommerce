{"ast":null,"code":"var baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n/** Error message constants. */\n\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/** Used to compose bitmasks for function metadata. */\n\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max;\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\n\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  var length = partials ? partials.length : 0;\n\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n    partials = holders = undefined;\n  }\n\n  var data = isBindKey ? undefined : getData(func);\n  var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/_createWrap.js"],"names":["baseSetData","require","createBind","createCurry","createHybrid","createPartial","getData","mergeData","setData","setWrapToString","toInteger","FUNC_ERROR_TEXT","WRAP_BIND_FLAG","WRAP_BIND_KEY_FLAG","WRAP_CURRY_FLAG","WRAP_CURRY_RIGHT_FLAG","WRAP_PARTIAL_FLAG","WRAP_PARTIAL_RIGHT_FLAG","nativeMax","Math","max","createWrap","func","bitmask","thisArg","partials","holders","argPos","ary","arity","isBindKey","TypeError","length","undefined","partialsRight","holdersRight","data","newData","result","apply","setter","module","exports"],"mappings":"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","sourcesContent":["var baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar WRAP_BIND_FLAG = 1,\n    WRAP_BIND_KEY_FLAG = 2,\n    WRAP_CURRY_FLAG = 8,\n    WRAP_CURRY_RIGHT_FLAG = 16,\n    WRAP_PARTIAL_FLAG = 32,\n    WRAP_PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *    1 - `_.bind`\n *    2 - `_.bindKey`\n *    4 - `_.curry` or `_.curryRight` of a bound function\n *    8 - `_.curry`\n *   16 - `_.curryRight`\n *   32 - `_.partial`\n *   64 - `_.partialRight`\n *  128 - `_.rearg`\n *  256 - `_.ary`\n *  512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [\n    func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,\n    argPos, ary, arity\n  ];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] === undefined\n    ? (isBindKey ? 0 : func.length)\n    : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == WRAP_BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;\n"]},"metadata":{},"sourceType":"script"}