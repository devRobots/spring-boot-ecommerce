{"ast":null,"code":"var arrayMap = require('./_arrayMap'),\n    copyArray = require('./_copyArray'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol'),\n    stringToPath = require('./_stringToPath'),\n    toKey = require('./_toKey'),\n    toString = require('./toString');\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\n\n\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n}\n\nmodule.exports = toPath;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/toPath.js"],"names":["arrayMap","require","copyArray","isArray","isSymbol","stringToPath","toKey","toString","toPath","value","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,cAAD,CADvB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAFrB;AAAA,IAGIG,QAAQ,GAAGH,OAAO,CAAC,YAAD,CAHtB;AAAA,IAIII,YAAY,GAAGJ,OAAO,CAAC,iBAAD,CAJ1B;AAAA,IAKIK,KAAK,GAAGL,OAAO,CAAC,UAAD,CALnB;AAAA,IAMIM,QAAQ,GAAGN,OAAO,CAAC,YAAD,CANtB;AAQA;;;;;;;;;;;;;;;;;;;AAiBA,SAASO,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIN,OAAO,CAACM,KAAD,CAAX,EAAoB;AAClB,WAAOT,QAAQ,CAACS,KAAD,EAAQH,KAAR,CAAf;AACD;;AACD,SAAOF,QAAQ,CAACK,KAAD,CAAR,GAAkB,CAACA,KAAD,CAAlB,GAA4BP,SAAS,CAACG,YAAY,CAACE,QAAQ,CAACE,KAAD,CAAT,CAAb,CAA5C;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBH,MAAjB","sourcesContent":["var arrayMap = require('./_arrayMap'),\n    copyArray = require('./_copyArray'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol'),\n    stringToPath = require('./_stringToPath'),\n    toKey = require('./_toKey'),\n    toString = require('./toString');\n\n/**\n * Converts `value` to a property path array.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Util\n * @param {*} value The value to convert.\n * @returns {Array} Returns the new property path array.\n * @example\n *\n * _.toPath('a.b.c');\n * // => ['a', 'b', 'c']\n *\n * _.toPath('a[0].b.c');\n * // => ['a', '0', 'b', 'c']\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return arrayMap(value, toKey);\n  }\n  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));\n}\n\nmodule.exports = toPath;\n"]},"metadata":{},"sourceType":"script"}