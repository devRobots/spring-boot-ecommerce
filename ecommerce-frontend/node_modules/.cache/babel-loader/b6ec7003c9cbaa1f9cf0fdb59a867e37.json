{"ast":null,"code":"/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\n\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n\n  var offset = argsIndex;\n\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = composeArgsRight;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/_composeArgsRight.js"],"names":["nativeMax","Math","max","composeArgsRight","args","partials","holders","isCurried","argsIndex","argsLength","length","holdersIndex","holdersLength","rightIndex","rightLength","rangeLength","result","Array","isUncurried","offset","module","exports"],"mappings":"AAAA;AACA,IAAIA,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;;;;;;;;;;;;AAWA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,OAA1C,EAAmDC,SAAnD,EAA8D;AAC5D,MAAIC,SAAS,GAAG,CAAC,CAAjB;AAAA,MACIC,UAAU,GAAGL,IAAI,CAACM,MADtB;AAAA,MAEIC,YAAY,GAAG,CAAC,CAFpB;AAAA,MAGIC,aAAa,GAAGN,OAAO,CAACI,MAH5B;AAAA,MAIIG,UAAU,GAAG,CAAC,CAJlB;AAAA,MAKIC,WAAW,GAAGT,QAAQ,CAACK,MAL3B;AAAA,MAMIK,WAAW,GAAGf,SAAS,CAACS,UAAU,GAAGG,aAAd,EAA6B,CAA7B,CAN3B;AAAA,MAOII,MAAM,GAAGC,KAAK,CAACF,WAAW,GAAGD,WAAf,CAPlB;AAAA,MAQII,WAAW,GAAG,CAACX,SARnB;;AAUA,SAAO,EAAEC,SAAF,GAAcO,WAArB,EAAkC;AAChCC,IAAAA,MAAM,CAACR,SAAD,CAAN,GAAoBJ,IAAI,CAACI,SAAD,CAAxB;AACD;;AACD,MAAIW,MAAM,GAAGX,SAAb;;AACA,SAAO,EAAEK,UAAF,GAAeC,WAAtB,EAAmC;AACjCE,IAAAA,MAAM,CAACG,MAAM,GAAGN,UAAV,CAAN,GAA8BR,QAAQ,CAACQ,UAAD,CAAtC;AACD;;AACD,SAAO,EAAEF,YAAF,GAAiBC,aAAxB,EAAuC;AACrC,QAAIM,WAAW,IAAIV,SAAS,GAAGC,UAA/B,EAA2C;AACzCO,MAAAA,MAAM,CAACG,MAAM,GAAGb,OAAO,CAACK,YAAD,CAAjB,CAAN,GAAyCP,IAAI,CAACI,SAAS,EAAV,CAA7C;AACD;AACF;;AACD,SAAOQ,MAAP;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBlB,gBAAjB","sourcesContent":["/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This function is like `composeArgs` except that the arguments composition\n * is tailored for `_.partialRight`.\n *\n * @private\n * @param {Array} args The provided arguments.\n * @param {Array} partials The arguments to append to those provided.\n * @param {Array} holders The `partials` placeholder indexes.\n * @params {boolean} [isCurried] Specify composing for a curried function.\n * @returns {Array} Returns the new array of composed arguments.\n */\nfunction composeArgsRight(args, partials, holders, isCurried) {\n  var argsIndex = -1,\n      argsLength = args.length,\n      holdersIndex = -1,\n      holdersLength = holders.length,\n      rightIndex = -1,\n      rightLength = partials.length,\n      rangeLength = nativeMax(argsLength - holdersLength, 0),\n      result = Array(rangeLength + rightLength),\n      isUncurried = !isCurried;\n\n  while (++argsIndex < rangeLength) {\n    result[argsIndex] = args[argsIndex];\n  }\n  var offset = argsIndex;\n  while (++rightIndex < rightLength) {\n    result[offset + rightIndex] = partials[rightIndex];\n  }\n  while (++holdersIndex < holdersLength) {\n    if (isUncurried || argsIndex < argsLength) {\n      result[offset + holders[holdersIndex]] = args[argsIndex++];\n    }\n  }\n  return result;\n}\n\nmodule.exports = composeArgsRight;\n"]},"metadata":{},"sourceType":"script"}