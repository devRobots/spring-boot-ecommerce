{"ast":null,"code":"var baseSlice = require('./_baseSlice'),\n    toInteger = require('./toInteger');\n/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */\n\n\nfunction take(array, n, guard) {\n  if (!(array && array.length)) {\n    return [];\n  }\n\n  n = guard || n === undefined ? 1 : toInteger(n);\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nmodule.exports = take;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/take.js"],"names":["baseSlice","require","toInteger","take","array","n","guard","length","undefined","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CADvB;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,SAASE,IAAT,CAAcC,KAAd,EAAqBC,CAArB,EAAwBC,KAAxB,EAA+B;AAC7B,MAAI,EAAEF,KAAK,IAAIA,KAAK,CAACG,MAAjB,CAAJ,EAA8B;AAC5B,WAAO,EAAP;AACD;;AACDF,EAAAA,CAAC,GAAIC,KAAK,IAAID,CAAC,KAAKG,SAAhB,GAA6B,CAA7B,GAAiCN,SAAS,CAACG,CAAD,CAA9C;AACA,SAAOL,SAAS,CAACI,KAAD,EAAQ,CAAR,EAAWC,CAAC,GAAG,CAAJ,GAAQ,CAAR,GAAYA,CAAvB,CAAhB;AACD;;AAEDI,MAAM,CAACC,OAAP,GAAiBP,IAAjB","sourcesContent":["var baseSlice = require('./_baseSlice'),\n    toInteger = require('./toInteger');\n\n/**\n * Creates a slice of `array` with `n` elements taken from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to take.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.take([1, 2, 3]);\n * // => [1]\n *\n * _.take([1, 2, 3], 2);\n * // => [1, 2]\n *\n * _.take([1, 2, 3], 5);\n * // => [1, 2, 3]\n *\n * _.take([1, 2, 3], 0);\n * // => []\n */\nfunction take(array, n, guard) {\n  if (!(array && array.length)) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nmodule.exports = take;\n"]},"metadata":{},"sourceType":"script"}