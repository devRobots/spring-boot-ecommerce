{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createShorthand, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport FeedContent from './FeedContent';\nimport FeedLabel from './FeedLabel';\n/**\n * A feed contains an event.\n */\n\nfunction FeedEvent(props) {\n  var content = props.content,\n      children = props.children,\n      className = props.className,\n      date = props.date,\n      extraImages = props.extraImages,\n      extraText = props.extraText,\n      image = props.image,\n      icon = props.icon,\n      meta = props.meta,\n      summary = props.summary;\n  var classes = cx('event', className);\n  var rest = getUnhandledProps(FeedEvent, props);\n  var ElementType = getElementType(FeedEvent, props);\n  var hasContentProp = content || date || extraImages || extraText || meta || summary;\n  var contentProps = {\n    content: content,\n    date: date,\n    extraImages: extraImages,\n    extraText: extraText,\n    meta: meta,\n    summary: summary\n  };\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedLabel, function (val) {\n    return {\n      icon: val\n    };\n  }, icon, {\n    autoGenerateKey: false\n  }), createShorthand(FeedLabel, function (val) {\n    return {\n      image: val\n    };\n  }, image, {\n    autoGenerateKey: false\n  }), hasContentProp && React.createElement(FeedContent, contentProps), children);\n}\n\nFeedEvent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"date\", \"extraImages\", \"extraText\", \"icon\", \"image\", \"meta\", \"summary\"];\nFeedEvent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for FeedContent. */\n  content: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedDate. */\n  date: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with images. */\n  extraImages: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with content. */\n  extraText: customPropTypes.itemShorthand,\n\n  /** An event can contain icon label. */\n  icon: customPropTypes.itemShorthand,\n\n  /** An event can contain image label. */\n  image: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedSummary. */\n  summary: customPropTypes.itemShorthand\n} : {};\nexport default FeedEvent;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/views/Feed/FeedEvent.js"],"names":["_extends","cx","PropTypes","React","createShorthand","customPropTypes","getElementType","getUnhandledProps","FeedContent","FeedLabel","FeedEvent","props","content","children","className","date","extraImages","extraText","image","icon","meta","summary","classes","rest","ElementType","hasContentProp","contentProps","createElement","val","autoGenerateKey","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","itemShorthand"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { createShorthand, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\nimport FeedContent from './FeedContent';\nimport FeedLabel from './FeedLabel';\n/**\n * A feed contains an event.\n */\n\nfunction FeedEvent(props) {\n  var content = props.content,\n      children = props.children,\n      className = props.className,\n      date = props.date,\n      extraImages = props.extraImages,\n      extraText = props.extraText,\n      image = props.image,\n      icon = props.icon,\n      meta = props.meta,\n      summary = props.summary;\n  var classes = cx('event', className);\n  var rest = getUnhandledProps(FeedEvent, props);\n  var ElementType = getElementType(FeedEvent, props);\n  var hasContentProp = content || date || extraImages || extraText || meta || summary;\n  var contentProps = {\n    content: content,\n    date: date,\n    extraImages: extraImages,\n    extraText: extraText,\n    meta: meta,\n    summary: summary\n  };\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(FeedLabel, function (val) {\n    return {\n      icon: val\n    };\n  }, icon, {\n    autoGenerateKey: false\n  }), createShorthand(FeedLabel, function (val) {\n    return {\n      image: val\n    };\n  }, image, {\n    autoGenerateKey: false\n  }), hasContentProp && React.createElement(FeedContent, contentProps), children);\n}\n\nFeedEvent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"date\", \"extraImages\", \"extraText\", \"icon\", \"image\", \"meta\", \"summary\"];\nFeedEvent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for FeedContent. */\n  content: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedDate. */\n  date: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with images. */\n  extraImages: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedExtra with content. */\n  extraText: customPropTypes.itemShorthand,\n\n  /** An event can contain icon label. */\n  icon: customPropTypes.itemShorthand,\n\n  /** An event can contain image label. */\n  image: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** Shorthand for FeedSummary. */\n  summary: customPropTypes.itemShorthand\n} : {};\nexport default FeedEvent;"]},"metadata":{},"sourceType":"module"}