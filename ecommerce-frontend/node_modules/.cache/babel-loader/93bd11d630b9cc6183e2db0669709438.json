{"ast":null,"code":"import * as React from 'react';\n\nvar isActionSupported = function isActionSupported(targetRef, method) {\n  return targetRef && !!targetRef.current && !!targetRef.current[method];\n};\n\nvar useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n  React.useEffect(function () {\n    if (isActionSupported(targetRef, 'addEventListener')) {\n      ;\n      targetRef.current.addEventListener(type, eventHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@stardust-ui/react-component-event-listener: Passed `targetRef` is not valid or does not support `addEventListener()` method.');\n    }\n\n    return function () {\n      if (isActionSupported(targetRef, 'removeEventListener')) {\n        ;\n        targetRef.current.removeEventListener(type, eventHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@stardust-ui/react-component-event-listener: Passed `targetRef` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, targetRef, type]);\n};\n\nexport default useEventListener;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/@stardust-ui/react-component-event-listener/dist/es/useEventListener.js"],"names":["React","isActionSupported","targetRef","method","current","useEventListener","options","capture","listener","type","latestListener","useRef","eventHandler","useCallback","event","useEffect","addEventListener","process","env","NODE_ENV","Error","removeEventListener"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,IAAIC,iBAAiB,GAAG,SAASA,iBAAT,CAA2BC,SAA3B,EAAsCC,MAAtC,EAA8C;AACpE,SAAOD,SAAS,IAAI,CAAC,CAACA,SAAS,CAACE,OAAzB,IAAoC,CAAC,CAACF,SAAS,CAACE,OAAV,CAAkBD,MAAlB,CAA7C;AACD,CAFD;;AAIA,IAAIE,gBAAgB,GAAG,SAASA,gBAAT,CAA0BC,OAA1B,EAAmC;AACxD,MAAIC,OAAO,GAAGD,OAAO,CAACC,OAAtB;AAAA,MACIC,QAAQ,GAAGF,OAAO,CAACE,QADvB;AAAA,MAEIC,IAAI,GAAGH,OAAO,CAACG,IAFnB;AAAA,MAGIP,SAAS,GAAGI,OAAO,CAACJ,SAHxB;AAIA,MAAIQ,cAAc,GAAGV,KAAK,CAACW,MAAN,CAAaH,QAAb,CAArB;AACAE,EAAAA,cAAc,CAACN,OAAf,GAAyBI,QAAzB;AACA,MAAII,YAAY,GAAGZ,KAAK,CAACa,WAAN,CAAkB,UAAUC,KAAV,EAAiB;AACpD,WAAOJ,cAAc,CAACN,OAAf,CAAuBU,KAAvB,CAAP;AACD,GAFkB,EAEhB,EAFgB,CAAnB;AAGAd,EAAAA,KAAK,CAACe,SAAN,CAAgB,YAAY;AAC1B,QAAId,iBAAiB,CAACC,SAAD,EAAY,kBAAZ,CAArB,EAAsD;AACpD;AACAA,MAAAA,SAAS,CAACE,OAAV,CAAkBY,gBAAlB,CAAmCP,IAAnC,EAAyCG,YAAzC,EAAuDL,OAAvD;AACD,KAHD,MAGO,IAAIU,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAChD,YAAM,IAAIC,KAAJ,CAAU,+HAAV,CAAN;AACD;;AAED,WAAO,YAAY;AACjB,UAAInB,iBAAiB,CAACC,SAAD,EAAY,qBAAZ,CAArB,EAAyD;AACvD;AACAA,QAAAA,SAAS,CAACE,OAAV,CAAkBiB,mBAAlB,CAAsCZ,IAAtC,EAA4CG,YAA5C,EAA0DL,OAA1D;AACD,OAHD,MAGO,IAAIU,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AAChD,cAAM,IAAIC,KAAJ,CAAU,kIAAV,CAAN;AACD;AACF,KAPD;AAQD,GAhBD,EAgBG,CAACb,OAAD,EAAUL,SAAV,EAAqBO,IAArB,CAhBH;AAiBD,CA3BD;;AA6BA,eAAeJ,gBAAf","sourcesContent":["import * as React from 'react';\n\nvar isActionSupported = function isActionSupported(targetRef, method) {\n  return targetRef && !!targetRef.current && !!targetRef.current[method];\n};\n\nvar useEventListener = function useEventListener(options) {\n  var capture = options.capture,\n      listener = options.listener,\n      type = options.type,\n      targetRef = options.targetRef;\n  var latestListener = React.useRef(listener);\n  latestListener.current = listener;\n  var eventHandler = React.useCallback(function (event) {\n    return latestListener.current(event);\n  }, []);\n  React.useEffect(function () {\n    if (isActionSupported(targetRef, 'addEventListener')) {\n      ;\n      targetRef.current.addEventListener(type, eventHandler, capture);\n    } else if (process.env.NODE_ENV !== 'production') {\n      throw new Error('@stardust-ui/react-component-event-listener: Passed `targetRef` is not valid or does not support `addEventListener()` method.');\n    }\n\n    return function () {\n      if (isActionSupported(targetRef, 'removeEventListener')) {\n        ;\n        targetRef.current.removeEventListener(type, eventHandler, capture);\n      } else if (process.env.NODE_ENV !== 'production') {\n        throw new Error('@stardust-ui/react-component-event-listener: Passed `targetRef` is not valid or does not support `removeEventListener()` method.');\n      }\n    };\n  }, [capture, targetRef, type]);\n};\n\nexport default useEventListener;"]},"metadata":{},"sourceType":"module"}