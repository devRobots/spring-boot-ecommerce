{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/views/Card/CardContent.js"],"names":["_extends","_without","cx","PropTypes","React","childrenUtils","createShorthand","customPropTypes","getElementType","getUnhandledProps","SUI","useKeyOnly","useTextAlignProp","CardDescription","CardHeader","CardMeta","CardContent","props","children","className","content","description","extra","header","meta","textAlign","classes","rest","ElementType","isNil","createElement","val","autoGenerateKey","handledProps","propTypes","process","env","NODE_ENV","as","elementType","node","string","contentShorthand","itemShorthand","bool","oneOf","TEXT_ALIGNMENTS"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthand, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\nimport CardDescription from './CardDescription';\nimport CardHeader from './CardHeader';\nimport CardMeta from './CardMeta';\n/**\n * A card can contain blocks of content or extra content meant to be formatted separately from the main content.\n */\n\nfunction CardContent(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      description = props.description,\n      extra = props.extra,\n      header = props.header,\n      meta = props.meta,\n      textAlign = props.textAlign;\n  var classes = cx(useKeyOnly(extra, 'extra'), useTextAlignProp(textAlign), 'content', className);\n  var rest = getUnhandledProps(CardContent, props);\n  var ElementType = getElementType(CardContent, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  if (!childrenUtils.isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), createShorthand(CardHeader, function (val) {\n    return {\n      content: val\n    };\n  }, header, {\n    autoGenerateKey: false\n  }), createShorthand(CardMeta, function (val) {\n    return {\n      content: val\n    };\n  }, meta, {\n    autoGenerateKey: false\n  }), createShorthand(CardDescription, function (val) {\n    return {\n      content: val\n    };\n  }, description, {\n    autoGenerateKey: false\n  }));\n}\n\nCardContent.handledProps = [\"as\", \"children\", \"className\", \"content\", \"description\", \"extra\", \"header\", \"meta\", \"textAlign\"];\nCardContent.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Shorthand for CardDescription. */\n  description: customPropTypes.itemShorthand,\n\n  /** A card can contain extra content meant to be formatted separately from the main content. */\n  extra: PropTypes.bool,\n\n  /** Shorthand for CardHeader. */\n  header: customPropTypes.itemShorthand,\n\n  /** Shorthand for CardMeta. */\n  meta: customPropTypes.itemShorthand,\n\n  /** A card content can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified'))\n} : {};\nexport default CardContent;"]},"metadata":{},"sourceType":"module"}