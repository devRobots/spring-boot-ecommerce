{"ast":null,"code":"import _inRange from \"lodash/inRange\";\nimport _first from \"lodash/first\";\nimport _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport _some from \"lodash/some\";\n/**\n * Determines if a click's coordinates are within the bounds of a node.\n *\n * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384\n *\n * @param {object} node - A DOM node.\n * @param {object} e - A SyntheticEvent or DOM Event.\n * @returns {boolean}\n */\n\nvar doesNodeContainClick = function doesNodeContainClick(node, e) {\n  if (_some([e, node], _isNil)) return false; // if there is an e.target and it is in the document, use a simple node.contains() check\n\n  if (e.target) {\n    _invoke(e.target, 'setAttribute', 'data-suir-click-target', true);\n\n    if (document.querySelector('[data-suir-click-target=true]')) {\n      _invoke(e.target, 'removeAttribute', 'data-suir-click-target');\n\n      return node.contains(e.target);\n    }\n  } // Below logic handles cases where the e.target is no longer in the document.\n  // The result of the click likely has removed the e.target node.\n  // Instead of node.contains(), we'll identify the click by X/Y position.\n  // return early if the event properties aren't available\n  // prevent measuring the node and repainting if we don't need to\n\n\n  var clientX = e.clientX,\n      clientY = e.clientY;\n  if (_some([clientX, clientY], _isNil)) return false; // false if the node is not visible\n\n  var clientRects = node.getClientRects(); // Heads Up!\n  // getClientRects returns a DOMRectList, not an array nor a plain object\n  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes\n\n  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false; // false if the node doesn't have a valid bounding rect\n\n  var _first2 = _first(clientRects),\n      top = _first2.top,\n      bottom = _first2.bottom,\n      left = _first2.left,\n      right = _first2.right;\n\n  if (_some([top, bottom, left, right], _isNil)) return false; // we add a small decimal to the upper bound just to make it inclusive\n  // don't add an whole pixel (1) as the event/node values may be decimal sensitive\n\n  return _inRange(clientY, top, bottom + 0.001) && _inRange(clientX, left, right + 0.001);\n};\n\nexport default doesNodeContainClick;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/lib/doesNodeContainClick.js"],"names":["_inRange","_first","_invoke","_isNil","_some","doesNodeContainClick","node","e","target","document","querySelector","contains","clientX","clientY","clientRects","getClientRects","offsetWidth","offsetHeight","length","_first2","top","bottom","left","right"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA;;;;;;;;;;AASA,IAAIC,oBAAoB,GAAG,SAASA,oBAAT,CAA8BC,IAA9B,EAAoCC,CAApC,EAAuC;AAChE,MAAIH,KAAK,CAAC,CAACG,CAAD,EAAID,IAAJ,CAAD,EAAYH,MAAZ,CAAT,EAA8B,OAAO,KAAP,CADkC,CACpB;;AAE5C,MAAII,CAAC,CAACC,MAAN,EAAc;AACZN,IAAAA,OAAO,CAACK,CAAC,CAACC,MAAH,EAAW,cAAX,EAA2B,wBAA3B,EAAqD,IAArD,CAAP;;AAEA,QAAIC,QAAQ,CAACC,aAAT,CAAuB,+BAAvB,CAAJ,EAA6D;AAC3DR,MAAAA,OAAO,CAACK,CAAC,CAACC,MAAH,EAAW,iBAAX,EAA8B,wBAA9B,CAAP;;AAEA,aAAOF,IAAI,CAACK,QAAL,CAAcJ,CAAC,CAACC,MAAhB,CAAP;AACD;AACF,GAX+D,CAW9D;AACF;AACA;AACA;AACA;;;AAGA,MAAII,OAAO,GAAGL,CAAC,CAACK,OAAhB;AAAA,MACIC,OAAO,GAAGN,CAAC,CAACM,OADhB;AAEA,MAAIT,KAAK,CAAC,CAACQ,OAAD,EAAUC,OAAV,CAAD,EAAqBV,MAArB,CAAT,EAAuC,OAAO,KAAP,CApByB,CAoBX;;AAErD,MAAIW,WAAW,GAAGR,IAAI,CAACS,cAAL,EAAlB,CAtBgE,CAsBvB;AACzC;AACA;;AAEA,MAAI,CAACT,IAAI,CAACU,WAAN,IAAqB,CAACV,IAAI,CAACW,YAA3B,IAA2C,CAACH,WAA5C,IAA2D,CAACA,WAAW,CAACI,MAA5E,EAAoF,OAAO,KAAP,CA1BpB,CA0BkC;;AAElG,MAAIC,OAAO,GAAGlB,MAAM,CAACa,WAAD,CAApB;AAAA,MACIM,GAAG,GAAGD,OAAO,CAACC,GADlB;AAAA,MAEIC,MAAM,GAAGF,OAAO,CAACE,MAFrB;AAAA,MAGIC,IAAI,GAAGH,OAAO,CAACG,IAHnB;AAAA,MAIIC,KAAK,GAAGJ,OAAO,CAACI,KAJpB;;AAMA,MAAInB,KAAK,CAAC,CAACgB,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,KAApB,CAAD,EAA6BpB,MAA7B,CAAT,EAA+C,OAAO,KAAP,CAlCiB,CAkCH;AAC7D;;AAEA,SAAOH,QAAQ,CAACa,OAAD,EAAUO,GAAV,EAAeC,MAAM,GAAG,KAAxB,CAAR,IAA0CrB,QAAQ,CAACY,OAAD,EAAUU,IAAV,EAAgBC,KAAK,GAAG,KAAxB,CAAzD;AACD,CAtCD;;AAwCA,eAAelB,oBAAf","sourcesContent":["import _inRange from \"lodash/inRange\";\nimport _first from \"lodash/first\";\nimport _invoke from \"lodash/invoke\";\nimport _isNil from \"lodash/isNil\";\nimport _some from \"lodash/some\";\n\n/**\n * Determines if a click's coordinates are within the bounds of a node.\n *\n * @see https://github.com/Semantic-Org/Semantic-UI-React/pull/2384\n *\n * @param {object} node - A DOM node.\n * @param {object} e - A SyntheticEvent or DOM Event.\n * @returns {boolean}\n */\nvar doesNodeContainClick = function doesNodeContainClick(node, e) {\n  if (_some([e, node], _isNil)) return false; // if there is an e.target and it is in the document, use a simple node.contains() check\n\n  if (e.target) {\n    _invoke(e.target, 'setAttribute', 'data-suir-click-target', true);\n\n    if (document.querySelector('[data-suir-click-target=true]')) {\n      _invoke(e.target, 'removeAttribute', 'data-suir-click-target');\n\n      return node.contains(e.target);\n    }\n  } // Below logic handles cases where the e.target is no longer in the document.\n  // The result of the click likely has removed the e.target node.\n  // Instead of node.contains(), we'll identify the click by X/Y position.\n  // return early if the event properties aren't available\n  // prevent measuring the node and repainting if we don't need to\n\n\n  var clientX = e.clientX,\n      clientY = e.clientY;\n  if (_some([clientX, clientY], _isNil)) return false; // false if the node is not visible\n\n  var clientRects = node.getClientRects(); // Heads Up!\n  // getClientRects returns a DOMRectList, not an array nor a plain object\n  // We explicitly avoid _.isEmpty and check .length to cover all possible shapes\n\n  if (!node.offsetWidth || !node.offsetHeight || !clientRects || !clientRects.length) return false; // false if the node doesn't have a valid bounding rect\n\n  var _first2 = _first(clientRects),\n      top = _first2.top,\n      bottom = _first2.bottom,\n      left = _first2.left,\n      right = _first2.right;\n\n  if (_some([top, bottom, left, right], _isNil)) return false; // we add a small decimal to the upper bound just to make it inclusive\n  // don't add an whole pixel (1) as the event/node values may be decimal sensitive\n\n  return _inRange(clientY, top, bottom + 0.001) && _inRange(clientX, left, right + 0.001);\n};\n\nexport default doesNodeContainClick;"]},"metadata":{},"sourceType":"module"}