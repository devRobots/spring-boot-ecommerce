{"ast":null,"code":"var copyArray = require('./_copyArray'),\n    isIndex = require('./_isIndex');\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\n\nvar nativeMin = Math.min;\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\n\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n\n  return array;\n}\n\nmodule.exports = reorder;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/_reorder.js"],"names":["copyArray","require","isIndex","nativeMin","Math","min","reorder","array","indexes","arrLength","length","oldArray","index","undefined","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAD,CAAvB;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,YAAD,CADrB;AAGA;;;AACA,IAAIE,SAAS,GAAGC,IAAI,CAACC,GAArB;AAEA;;;;;;;;;;;AAUA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAC/B,MAAIC,SAAS,GAAGF,KAAK,CAACG,MAAtB;AAAA,MACIA,MAAM,GAAGP,SAAS,CAACK,OAAO,CAACE,MAAT,EAAiBD,SAAjB,CADtB;AAAA,MAEIE,QAAQ,GAAGX,SAAS,CAACO,KAAD,CAFxB;;AAIA,SAAOG,MAAM,EAAb,EAAiB;AACf,QAAIE,KAAK,GAAGJ,OAAO,CAACE,MAAD,CAAnB;AACAH,IAAAA,KAAK,CAACG,MAAD,CAAL,GAAgBR,OAAO,CAACU,KAAD,EAAQH,SAAR,CAAP,GAA4BE,QAAQ,CAACC,KAAD,CAApC,GAA8CC,SAA9D;AACD;;AACD,SAAON,KAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBT,OAAjB","sourcesContent":["var copyArray = require('./_copyArray'),\n    isIndex = require('./_isIndex');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Reorder `array` according to the specified indexes where the element at\n * the first index is assigned as the first element, the element at\n * the second index is assigned as the second element, and so on.\n *\n * @private\n * @param {Array} array The array to reorder.\n * @param {Array} indexes The arranged array indexes.\n * @returns {Array} Returns `array`.\n */\nfunction reorder(array, indexes) {\n  var arrLength = array.length,\n      length = nativeMin(indexes.length, arrLength),\n      oldArray = copyArray(array);\n\n  while (length--) {\n    var index = indexes[length];\n    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\n  }\n  return array;\n}\n\nmodule.exports = reorder;\n"]},"metadata":{},"sourceType":"script"}