{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useKeyOnly } from '../../lib';\nimport AccordionAccordion from './AccordionAccordion';\nimport AccordionContent from './AccordionContent';\nimport AccordionPanel from './AccordionPanel';\nimport AccordionTitle from './AccordionTitle';\n/**\n * An accordion allows users to toggle the display of sections of content.\n */\n\nfunction Accordion(props) {\n  var className = props.className,\n      fluid = props.fluid,\n      inverted = props.inverted,\n      styled = props.styled;\n  var classes = cx('ui', useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), useKeyOnly(styled, 'styled'), className);\n  var rest = getUnhandledProps(Accordion, props);\n  return React.createElement(AccordionAccordion, _extends({}, rest, {\n    className: classes\n  }));\n}\n\nAccordion.handledProps = [\"className\", \"fluid\", \"inverted\", \"styled\"];\nAccordion.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Format to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Format for dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Adds some basic styling to accordion panels. */\n  styled: PropTypes.bool\n} : {};\nAccordion.Accordion = AccordionAccordion;\nAccordion.Content = AccordionContent;\nAccordion.Panel = AccordionPanel;\nAccordion.Title = AccordionTitle;\nexport default Accordion;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/semantic-ui-react/dist/es/modules/Accordion/Accordion.js"],"names":["_extends","cx","PropTypes","React","getUnhandledProps","useKeyOnly","AccordionAccordion","AccordionContent","AccordionPanel","AccordionTitle","Accordion","props","className","fluid","inverted","styled","classes","rest","createElement","handledProps","propTypes","process","env","NODE_ENV","string","bool","Content","Panel","Title"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gCAArB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT,EAA4BC,UAA5B,QAA8C,WAA9C;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA;;;;AAIA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,MAAIC,SAAS,GAAGD,KAAK,CAACC,SAAtB;AAAA,MACIC,KAAK,GAAGF,KAAK,CAACE,KADlB;AAAA,MAEIC,QAAQ,GAAGH,KAAK,CAACG,QAFrB;AAAA,MAGIC,MAAM,GAAGJ,KAAK,CAACI,MAHnB;AAIA,MAAIC,OAAO,GAAGf,EAAE,CAAC,IAAD,EAAOI,UAAU,CAACQ,KAAD,EAAQ,OAAR,CAAjB,EAAmCR,UAAU,CAACS,QAAD,EAAW,UAAX,CAA7C,EAAqET,UAAU,CAACU,MAAD,EAAS,QAAT,CAA/E,EAAmGH,SAAnG,CAAhB;AACA,MAAIK,IAAI,GAAGb,iBAAiB,CAACM,SAAD,EAAYC,KAAZ,CAA5B;AACA,SAAOR,KAAK,CAACe,aAAN,CAAoBZ,kBAApB,EAAwCN,QAAQ,CAAC,EAAD,EAAKiB,IAAL,EAAW;AAChEL,IAAAA,SAAS,EAAEI;AADqD,GAAX,CAAhD,CAAP;AAGD;;AAEDN,SAAS,CAACS,YAAV,GAAyB,CAAC,WAAD,EAAc,OAAd,EAAuB,UAAvB,EAAmC,QAAnC,CAAzB;AACAT,SAAS,CAACU,SAAV,GAAsBC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC;AAC5D;AACAX,EAAAA,SAAS,EAAEV,SAAS,CAACsB,MAFuC;;AAI5D;AACAX,EAAAA,KAAK,EAAEX,SAAS,CAACuB,IAL2C;;AAO5D;AACAX,EAAAA,QAAQ,EAAEZ,SAAS,CAACuB,IARwC;;AAU5D;AACAV,EAAAA,MAAM,EAAEb,SAAS,CAACuB;AAX0C,CAAxC,GAYlB,EAZJ;AAaAf,SAAS,CAACA,SAAV,GAAsBJ,kBAAtB;AACAI,SAAS,CAACgB,OAAV,GAAoBnB,gBAApB;AACAG,SAAS,CAACiB,KAAV,GAAkBnB,cAAlB;AACAE,SAAS,CAACkB,KAAV,GAAkBnB,cAAlB;AACA,eAAeC,SAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getUnhandledProps, useKeyOnly } from '../../lib';\nimport AccordionAccordion from './AccordionAccordion';\nimport AccordionContent from './AccordionContent';\nimport AccordionPanel from './AccordionPanel';\nimport AccordionTitle from './AccordionTitle';\n/**\n * An accordion allows users to toggle the display of sections of content.\n */\n\nfunction Accordion(props) {\n  var className = props.className,\n      fluid = props.fluid,\n      inverted = props.inverted,\n      styled = props.styled;\n  var classes = cx('ui', useKeyOnly(fluid, 'fluid'), useKeyOnly(inverted, 'inverted'), useKeyOnly(styled, 'styled'), className);\n  var rest = getUnhandledProps(Accordion, props);\n  return React.createElement(AccordionAccordion, _extends({}, rest, {\n    className: classes\n  }));\n}\n\nAccordion.handledProps = [\"className\", \"fluid\", \"inverted\", \"styled\"];\nAccordion.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Format to take up the width of its container. */\n  fluid: PropTypes.bool,\n\n  /** Format for dark backgrounds. */\n  inverted: PropTypes.bool,\n\n  /** Adds some basic styling to accordion panels. */\n  styled: PropTypes.bool\n} : {};\nAccordion.Accordion = AccordionAccordion;\nAccordion.Content = AccordionContent;\nAccordion.Panel = AccordionPanel;\nAccordion.Title = AccordionTitle;\nexport default Accordion;"]},"metadata":{},"sourceType":"module"}