{"ast":null,"code":"var LazyWrapper = require('./_LazyWrapper'),\n    getData = require('./_getData'),\n    getFuncName = require('./_getFuncName'),\n    lodash = require('./wrapperLodash');\n/**\n * Checks if `func` has a lazy counterpart.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n *  else `false`.\n */\n\n\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n\n  if (func === other) {\n    return true;\n  }\n\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nmodule.exports = isLaziable;","map":{"version":3,"sources":["/home/willi/Documentos/spring-boot-ecommerce/ecommerce-frontend/node_modules/lodash/_isLaziable.js"],"names":["LazyWrapper","require","getData","getFuncName","lodash","isLaziable","func","funcName","other","prototype","data","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,YAAD,CADrB;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAAC,gBAAD,CAFzB;AAAA,IAGIG,MAAM,GAAGH,OAAO,CAAC,iBAAD,CAHpB;AAKA;;;;;;;;;;AAQA,SAASI,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAIC,QAAQ,GAAGJ,WAAW,CAACG,IAAD,CAA1B;AAAA,MACIE,KAAK,GAAGJ,MAAM,CAACG,QAAD,CADlB;;AAGA,MAAI,OAAOC,KAAP,IAAgB,UAAhB,IAA8B,EAAED,QAAQ,IAAIP,WAAW,CAACS,SAA1B,CAAlC,EAAwE;AACtE,WAAO,KAAP;AACD;;AACD,MAAIH,IAAI,KAAKE,KAAb,EAAoB;AAClB,WAAO,IAAP;AACD;;AACD,MAAIE,IAAI,GAAGR,OAAO,CAACM,KAAD,CAAlB;AACA,SAAO,CAAC,CAACE,IAAF,IAAUJ,IAAI,KAAKI,IAAI,CAAC,CAAD,CAA9B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBP,UAAjB","sourcesContent":["var LazyWrapper = require('./_LazyWrapper'),\n    getData = require('./_getData'),\n    getFuncName = require('./_getFuncName'),\n    lodash = require('./wrapperLodash');\n\n/**\n * Checks if `func` has a lazy counterpart.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` has a lazy counterpart,\n *  else `false`.\n */\nfunction isLaziable(func) {\n  var funcName = getFuncName(func),\n      other = lodash[funcName];\n\n  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {\n    return false;\n  }\n  if (func === other) {\n    return true;\n  }\n  var data = getData(other);\n  return !!data && func === data[0];\n}\n\nmodule.exports = isLaziable;\n"]},"metadata":{},"sourceType":"script"}